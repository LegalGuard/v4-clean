/**
 * Utilitaire pour r√©initialiser compl√®tement la base de donn√©es IndexedDB
 * Utiliser en cas de probl√®me persistant avec la base de donn√©es
 */

export const resetIndexedDB = async (): Promise<boolean> => {
  return new Promise((resolve) => {
    try {
      console.log('üîÑ Tentative de r√©initialisation de la base de donn√©es...');
      
      // 1. Suppression des donn√©es de session
      localStorage.removeItem('token');
      localStorage.removeItem('user');
      console.log('‚úÖ Donn√©es de session supprim√©es');
      
      // 2. Suppression de la base de donn√©es IndexedDB
      const request = indexedDB.deleteDatabase('GivPlusDB');
      
      request.onsuccess = () => {
        console.log('‚úÖ Base de donn√©es supprim√©e avec succ√®s');
        alert('Base de donn√©es r√©initialis√©e avec succ√®s. La page va √™tre recharg√©e.');
        resolve(true);
        // Recharger la page apr√®s un court d√©lai pour permettre √† l'alerte d'√™tre vue
        setTimeout(() => {
          window.location.reload();
        }, 1000);
      };
      
      request.onerror = (event) => {
        console.error('‚ùå Erreur lors de la suppression de la base de donn√©es', event);
        alert('Erreur lors de la r√©initialisation de la base de donn√©es.');
        resolve(false);
      };
      
      request.onblocked = () => {
        console.warn('‚ö†Ô∏è La suppression de la base de donn√©es est bloqu√©e');
        alert('La base de donn√©es est actuellement utilis√©e par une autre page. Veuillez fermer toutes les autres onglets de cette application et r√©essayer.');
        resolve(false);
      };
    } catch (error) {
      console.error('‚ùå Erreur lors de la r√©initialisation:', error);
      alert('Erreur inattendue lors de la r√©initialisation.');
      resolve(false);
    }
  });
};
